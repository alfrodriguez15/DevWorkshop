1. Check out the code reviewer guidelines for software engineers at Yelp and Microsoft (Visual Studio Mobile team). What concepts are similar between the companies (List at least two)? What are some key differences (List at least two)? In general, what items should be present in a code review checklist for a development team?
Two concepts that were really similar between the two were that smaller is better as far as pull requests go and, also related to the smaller is better concept, 
that the faster the code is returned to the submitter or the reviewer, the better. One big difference between the two is that the Yelp page talked about mostly formal and things that should be followed for a successful code review. Microsoft, on the other hand, had that along with many tips related to how you treat  your reviewer. 
It seemed to emphasize respect and the  relationship between reviewer and submitter significantly while Yelp seemed to focus more on the process of reviewing and not so much on the relationship aspect. Basically, Yelp's page seems like rules while Microsoft's page seems like tips. Another difference would be some unique aspects and tips that Microsoft includes such as emoji code to be clear about the type of suggestion you are making or using automation so that the reviewer can focus on more important problems. Some items that should always be present in a checklist for a development team, in my opinion, would be keeping it as concise and small as possible to get fast feedback, maintaining readability, seek/provide feedback regularly, and be clear and respectful with your feedback (leave no openings for ambiguity and do not disrespect whoever wrote the code).
2. Find an example of a "good" code review. Provide a link to the review and explain why you found the review beneficial.
https://codereview.stackexchange.com/questions/287801/how-to-optimize-the-player-movement-code-like-in-tomb-of-the-musk-game
I believe the link I provided has a good code review. The reason is that it provides concise and detailed feedback, and a respectful and helpful tone, while also offering solutions to other problems that might help further along the line. They also provided quick feedback on any new problems arising from the use of the feedback given. The submitter also did a good job providing code that was not too broad or big for a single code review, making review faster and easier.

3. Find an example of a "bad" code review. Provide a link to the review and briefly explain why you found the review not beneficial. In addition, include recommendations for improvement to the review feedback.
https://codereview.stackexchange.com/questions/202871/metropolis-monte-carlo-sampler-in-rust
I believe the link I provided has "bad" code review. The reason why I think this is that while it does provide feedback, it does not really provide any feedback with the actual problems with the code. Instead it only makes a couple syntax and formatting corrections which were unrelated to the actual problem.
